# -*- coding: utf-8 -*-
"""RoadAccidentSeverityPrediction

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LImbu9PGONcjzh5Y_5PC310PlcaGZvlL
"""

import pandas as pd

# Read the CSV file into a Pandas DataFrame
nelly = pd.read_csv('/content/RoadAccidentsSeverityPrediction.csv')

# Print the shape of the dataset
print("Shape of the dataset:", nelly.shape)

# Print the first 5 rows of the dataset
nelly.head()

import pandas as pd

nelly = pd.read_csv('/content/RoadAccidentsSeverityPrediction.csv')
data = nelly.loc[:, ['Number_of_vehicles_involved', 'Accident_severity']]
data.head(30)

def convert_accident_severity_to_numeric(accident_severity):
    accident_severity_map = {
        "Slight Injury": 1,
        "Serious Injury": 2,
    }
    return accident_severity_map.get(accident_severity, 0)

import pandas as pd
import matplotlib.pyplot as plt

# Read the CSV file into a DataFrame.
nelly = pd.read_csv('/content/RoadAccidentsSeverityPrediction.csv')

# Convert the accident severity strings to numeric values.
nelly['Accident_severity'] = nelly['Accident_severity'].apply(convert_accident_severity_to_numeric)

# Plot the data.
nelly.plot(x='Number_of_vehicles_involved', y='Accident_severity', style='o')

# Add labels to the axes.
plt.xlabel('Number_of_vehicles_involved')
plt.ylabel('Accident_severity')
plt.show()

# ADDING A LINEAR REGRESSION MODEL
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression

# Define the function to convert accident severity to numeric.
def convert_accident_severity_to_numeric(accident_severity):
    accident_severity_map = {
        "Slight Injury": 1,
        "Serious Injury": 2,
    }
    return accident_severity_map.get(accident_severity, 0)

# Load the data
nelly = pd.read_csv('/content/RoadAccidentsSeverityPrediction.csv')


# Convert the string values in the 'Accident_severity' column to numerical values.
nelly['Accident_severity'] = nelly['Accident_severity'].apply(lambda x: convert_accident_severity_to_numeric(x))

# Extract the independent variable (X) and dependent variable (y)
X = nelly[['Number_of_vehicles_involved']]
y = nelly['Accident_severity']

# Create and fit a linear regression model
regressor = LinearRegression()
regressor.fit(X, y)

# Plot the data points
nelly.plot(x='Number_of_vehicles_involved', y='Accident_severity', style='o', label='Data Points')

# Overlay the regression line
plt.plot(X, regressor.predict(X), color='yellow', linewidth=2, label='Regression Line')

# Label the axes
plt.xlabel('Number_of_vehicles_involved')
plt.ylabel('Accident_severity')

# Add a legend
plt.legend()

# Show the plot
plt.show()

# Divide the data into independent and dependent variables.

import pandas as pd

nelly = pd.read_csv('/content/RoadAccidentsSeverityPrediction.csv')
x = pd.DataFrame(data['Number_of_vehicles_involved'])
y = pd.DataFrame(data['Accident_severity'])

# Split the data into train and test sets.

import pandas as pd
from sklearn.model_selection import train_test_split

wainaina = pd.read_csv('/content/RoadAccidentsSeverityPrediction.csv')

x = pd.DataFrame(data['Number_of_vehicles_involved'])
y = pd.DataFrame(data['Accident_severity'])

X_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=1)

# Shape of the train and test sets.

print(X_train.shape)
print(X_test.shape)
print(y_train.shape)
print(y_test.shape)

# Train the algorithm.

import pandas as pd
from sklearn.linear_model import LinearRegression

# Split the data into train and test sets.
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20)

# Convert the string values in the 'Accident_severity' column of the train set to numerical values.
X_train['Accident_severity'] = X_train['Accident_severity'].apply(lambda x: convert_accident_severity_to_numeric(x))
#Create and fit a linear regression model to the train set.
regressor = LinearRegression()
regressor.fit(X_train, y_train)

print(regressor.intercept_)

print(regressor.coef_)

y_pred = regressor.predict(X_test)
y_pred

# Actual Values
y_test.head(20)

import joblib
from sklearn.linear_model import LinearRegression
model = LinearRegression()
model_filename = 'linear_regression_model.pkl'
joblib.dump(model, model_filename)

print(f"Linear Regression model saved to {model_filename}")